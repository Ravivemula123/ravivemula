{"#### Q1. Which type cast preserves the mathematical value in all cases?\n": ["- [ ] i64 as i32\n", "- [ ] usize as u64\n", "- [x] i32 as i64\n", "- [ ] f64 as f32\n"], 
    
"#### Q2. What do the vertical bars represent here?\n rust\nstr::thread::spawn(|| {\n    println!('LinkedIn'); \n});": ["- [x] a closure\n", "- [ ] a thread\n", "- [ ] a future\n", "- [ ] a block\n","[reference](https://doc.rust-lang.org/book/ch13-01-closures.html#refactoring-with-closures-to-store-code)\n"], "#### Q3. Which choice is not a scalar data type?\n": ["- [ ] integer\n", "- [ ] float\n", "- [ ] boolean\n", "- [x] tuple\n"], "#### Q4. **\\_** cannot be destructured.\n": ["- [x] Traits\n", "- [ ] Tuples\n", "- [ ] Enums\n", "- [ ] Structs\n","[reference](https://rust-lang.github.io/rfcs/2909-destructuring-assignment.html)\n"], "#### Q5. Which `cargo` command checks a program for error without creating a binary executable?\n": ["- [ ] cargo --version\n", "- [ ] cargo init\n", "- [ ] cargo build\n", "- [x] cargo check\n"], "#### Q6. The term _box_ and related phrases such as _boxing a value_ are often used when relating to memory layout. What does _box_ refer to?\n": ["- [ ] It's creating a pointer on the heap that points to a value on the stack.\n", "- [x] It's creating a pointer on the stack that points to a value on the heap.\n", "- [ ] It's creating a memory guard around values to prevent illegal access.\n", "- [ ] It's an abstraction that refers to ownership. \"Boxed\" values are clearly labelled.\n"], 
"#### Q7. What is an alternative way of writing `slice` that produces the same result?\n rust \n ... \nlet s = String::form('hello'); \nlet slice = &s[0..2];\n": ["- [ ] let slice = &s[len + 2];\n", "- [ ] let slice = &s[len - 2];\n", "- [ ] let slice = &s.copy(0..2);\n", "- [x] let slice = &s[..2];\n"], "#### Q8. Using the `?` operator at the end of an expression is equivalent to **\\_**.\n": ["- [ ] a match pattern that branches into True or False\n", "- [ ] calling ok_error()\n", "- [ ] calling panic!()\n", "- [x] a match pattern that may result an early return\n"], "#### Q9. Which is valid syntax for defining an array of i32 values?\n": ["- [ ] Array<i32>::with_capacity(10)\n", "- [ ] [i32]\n", "- [ ] Array<i32>::new(10)\n", "- [x] [i32; 10]\n"],
 "#### Q10. What syntax is required to take a mutable reference to T, when used within a function argument?\n rust\n  fn increment(i: T) {\n     // body elided\n }\n": ["- [ ] \\*mut T\n", "- [ ] mut ref T\n", "- [ ] mut &T\n", "- [x] &mut T\n"], "#### Q11. The smart pointers Rc and Arc provide reference counting. What is the API for incrementing a reference count?\n": ["- [ ] .add()\n", "- [ ] .incr()\n", "- [x] .clone()\n", "- [ ] .increment()\n","[reference](https://doc.rust-lang.org/book/ch15-04-rc.html)\n"], "#### Q12. What happens when an error occurs that is being handled by the question mark (?) operator?\n": ["- [ ] The error is reported and execution continues.\n", "- [ ] An exception is raised. The effect(s) of the exception are defined by the error! macro.\n", "- [ ] The program panics immediately.\n", "- [x] Rust attempts to convert the error to the local function's error type and return it as Result::Err. If that fails, the program panics.\n"], "#### Q13. Which comment syntax is not legal?\n": ["- [ ] `/*`\n", "- [x] `#`\n", "- [ ] `//!`\n", "- [ ] `//`\n"], "#### Q14. In matching patterns, values are ignored with \\_.\n": ["- [ ] `.ignore()`\n", "- [ ] `an underscore (_)`\n", "- [x] ..\n", "- [ ] skip\n"], "#### Q15. Defining a \\_ requires a lifetime parameter.\n": ["- [ ] function that ends the lifetime of one of its arguments\n", "- [x] struct that contains a reference to a value\n", "- [ ] function with a generic argument\n", "- [ ] struct that contains a reference to a boxed value\n","[Rust book reference](https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-annotations-in-struct-definitions)\n"], 
 
 "#### Q16. Which example correctly uses std::collections::HashMap's Entry API to populate counts?\n": [
    "- [ ]\n rust\n use std::collections::HashMap;\n fn main() {\n     let mut counts = HashMap::new();\n     let text = 'LinkedIn Learning';     for c in text.chars() {\n        // Complete this block\n     }\n println!('{:?}', counts);\n }\n", 
    "- [x]\nrust\n for c in text.chars() {\n   if let Some(count) = &mut counts.get(&c) {\n  counts.insert(c, *count + 1);\n } else {\n counts.insert(c, 1);\n};\n}\n`", 
    "- [ ]\nrust\n    for c in text.chars() {\n        let count = counts.entry(c).or_insert(0);\n        *count += 1;\n    }\n", 
    "- [ ]\n rust\n    for c in text.chars() {\n       let count = counts.entry(c);\n *count += 1;\n    }\n","[reference](https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.entry)\n"],
  "#### Q17. Which fragment does not incur memory allocations while writing to a \"file\" (represented by a Vec<u8>)?\n rust\n  use std::collections::HashMap;\n    fn main() -> Result<(), Box<dyn std::error::Error>> {\n      let mut v = Vec::<u8>::new();\n       let a = 'LinkedIn';\n      let b = 123;\n      let c = 'ðŸ§€';\n      // replace this line\n  println!('{:?}', v);\n Ok(())\n  }\n":
  ["- [x]\nrust\n  write!(&mut v, '{}{}{}', a, b, c)?;",
 "- [ ]\n rust\n  v.write(a)?;\n  v.write(b)?;\n v.write(c)?;\n", 
 "- [ ]\n rust\n v.write(a, b, c)?;\n", 
 "- [ ]\n rust\n v.write_all(a.as_bytes())?;\n v.write_all(&b.to_string().as_bytes())?;\n c.encode_utf8(&mut v);\n"], 
 "#### Q18. Does the `main` function compile? If so, why? If not, what do you need to change?\n rust\n fn main() {\n     let Some(x) = some_option_value;\n}\n": ["- [ ] The code does not compile. `let` statements require a refutable pattern. Add `if` before `let`.\n", "- [ ] The code compiles. `let` statements sometimes require a refutable pattern.\n", "- [x] The code does not compile. `let` statements requires an irrefutable pattern. Add `if` before `let`.\n", "- [ ] The code compiles. `let` do not require a refutable pattern.\n"], "#### Q19. Which statement about lifetimes is false?\n": ["- [ ] Lifetimes were redundantly specified in previous version of Rust.\n", "- [ ] Lifetimes are specified when a struct is holding a reference to a value.\n", "- [ ] Lifetimes are specified when certain values must outlive others.\n", "- [x] Lifetimes are always inferred by the compiler.\n"], "#### Q20. When used as a return type, which Rust type plays a similar role to Python's `None`, JavaScript's `null`, or the `void` type in C/C++?\n": ["- [ ] `!`\n", "- [ ] `None`\n", "- [ ] `Null`\n", "- [x] `()`\n"], "#### Q21. To convert a `Result` to an `Option`, which method should you use?\n": ["- [ ] `.as_option()`\n", "- [x] `.ok()`\n", "- [ ] `.to_option()`\n", "- [ ] `.into()`\n"], "#### Q22. Which statement about the `Clone` and `Copy` traits is false?\n": ["- [x] `Copy` is enabled for primitive, built-in types.\n", "- [ ] Without `Copy`, Rust applies move semantics to a type's access.\n", "- [ ] When using `Clone`, copying data is explicit.\n", "- [ ] Until a type implements either `Copy` or `Clone`, its internal data cannot be copied.\n","[ref from stack overflow](https://stackoverflow.com/questions/41413336/do-all-primitive-types-implement-the-copy-trait)\n    "], 
 "#### Q23. Why does this code _not_ compile?\n rust\n fn returns_closure() -> dyn Fn(i32) -> i32 {\n |x| x + 1 \n }\n": ["- [ ] The returned `fn` pointer and value need to be represented by another trait.\n", "- [ ] Closures are types, so they cannot be returned directly from a function.\n", "- [ ] Closures are types and can be returned only if the concrete trait is implemented.\n", "- [x] Closures are represented by traits, so they cannot be a return type.\n","[Rust book reference](https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html#returning-closures)\n    "], "#### Q24. What smart pointer is used to allow multiple ownership of a value in various threads?\n": ["- [x] `Arc<T>`\n", "- [ ] `Box<T>`\n", "- [ ] Both `Arc<T>` and `Rc<T>` are multithread safe.\n", "- [ ] `Rc<T>`\n","[Rust book reference](https://doc.rust-lang.org/book/ch16-03-shared-state.html?highlight=arc%3CT%3E#atomic-reference-counting-with-arct)\n"], "#### Q25. Which types are _not_ allowed within an enum variant's body?\n": ["- [ ] zero-sized types\n", "- [ ] structs\n", "- [x] trait objects\n", "- [ ] floating-point numbers\n","[Reference](https://doc.rust-lang.org/reference/types/trait-object.html)\n"], 
 "#### Q26. Which statement about this code is true?\n rust\n fn main() {\n     let c = 'z';\n     let heart_eyed_cat = 'ðŸ˜»';\n }\n": ["- [x] Both are character literals.\n", "- [ ] `heart_eyed_cat` is an invalid expression.\n", "- [ ] `c` is a string literal and `heart_eyed_cat` is a character literal.\n", "- [ ] Both are string literals.\n","[Reference](https://doc.rust-lang.org/std/primitive.char.html)\n"], "#### Q27. Your application requires a single copy of some data type T to be held in memory that can be accessed by multiple threads. What is the thread-safe wrapper type?\n": ["- [ ] `Mutex<Arc<T>>`\n", "- [ ] `Rc<Mutex<T>>`\n", "- [x] `Arc<Mutex<T>>`\n", "- [ ] `Mutex<Rc<T>>`\n","[Rust book reference](https://doc.rust-lang.org/book/ch16-03-shared-state.html#atomic-reference-counting-with-arct)\n    "], 
 "#### Q28. Which idiom can be used to concatenate the strings `a`, `b`, `c`?\n rust \nlet a = 'a'.to_string();\n    let b = 'b'.to_string();\n    let c = 'c'.to_string();\n": ["- [ ] `String::from(a,b,c)`\n", "- [x] `format!(\"{}{}{}\", a, b, c)`\n", "- [ ] `concat(a,b,c)`\n", "- [ ] `a + b + c`\n"], 
"#### Q29. In this function. what level of access is provided to the variable `a`?\n rust \n use std::fmt::Debug;\nfn report<T:Debug>(a: &T) {\neprintln!('info: {:?}', a);\n}\n": ["- [ ] print\n", "- [x] read-only\n", "- [ ] read/write\n", "- [ ] debug\n"], "#### Q30. Which choice is _not_ valid loop syntax?\n": ["- [ ] `loop`\n", "- [ ] `for`\n", "- [ ] `while`\n", "- [x] `do`\n"], 
"#### Q31. How do you construct a value of `Status` that is initialized to `Waiting`?\n rust\n enum Status {\n    Waiting,\n Busy,\n Error(String),\n}\n": ["- [ ] `let s = Enum::new(Status::Waiting);`\n", "- [ ] `let s = new Status::Waiting;`\n", "- [x] `let s = Status::Waiting;`\n", "- [ ] `let s = Status::new(Waiting);`\n"], "#### Q32. Which statement about enums is false?\n": ["- [ ] Enums are useful in matching patterns.\n", "- [ ] Option is an enum type.\n", "- [ ] Enum variants can have different types with associated data.\n", "- [x] the term _enum_ is short for _enummap_\n"], "#### Q33. What does an underscore (\\_) indicate when used as pattern?\n": ["- [x] It matches everything.\n", "- [ ] It matches underscores.\n", "- [ ] It matches any value that has a length of 1.\n", "- [ ] It matches nothing.\n"], "#### Q34. What is a safe operation on a `std::cell:UnsafeCell<T>`?\n": ["- [ ] A `&mut T` reference is allowed. However it may not cpexists with any other references. and may be created only in single-threaded code.\n", "- [ ] `UnsafeCell<T>` provides thread-safety. Therefore, creating `&T` references from multiple threads is safe.\n", "- [x] The only safe operation is the `.get()` method, which returns only a raw pointer.\n", "- [ ] Non. `UnsafeCell<T>` only allows code that would otherwise need unsafe blocks to be written in safe code.\n","[Reference](https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html)\n    "], "#### Q35. Generics are useful when you **\\_**.\n": ["- [ ] need to reduce code duplication by concretizing values and restricting parameters in functions\n", "- [x] need to reduce code duplication by abstracting values further, such as in function parameters\n", "- [ ] need a supertrait\n", "- [ ] are not sure if you need a specific kind of trait\n"], "#### Q36. How do you create a Rust project on the command-line?\n": ["- [x] cargo new\n", "- [ ] rustup init\n", "- [ ] cargo start\n", "- [ ] rust new-project\n"]}