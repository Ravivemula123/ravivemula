{"#### Q1. How does a matrix differ from a data frame?\n": ["- [ ] A matrix may contain numeric values only.\n", "- [ ] A matrix must not be singular.\n", "- [x] A data frame may contain variables that have different modes.\n", "- [ ] A data frame may contain variables of different lengths.\n"], "#### Q2. What value does this statement return?\n `unclass(as.Date('1971-01-01'))`\n": ["- [ ] 1\n", "- [x] 365\n", "- [ ] 4\n", "- [ ] 12\n"], "#### Q3. What do you use to take an object such as a data frame out of the workspace?\n": ["- [x] remove()\n", "- [ ] erase()\n", "- [ ] detach()\n", "- [ ] delete()\n"], "#### Q4. Review the following code. What is the result of line 3?\n xvect<-c(1,2,3)\n    xvect[2] <- '2'\n    xvect\n": ["- [ ] [1] 1 2 3\n", "- [ ] [1] \"1\" 2 \"3\"\n", "- [x] [1] \"1\" \"2\" \"3\"\n", "- [ ] [1] 7 9\n"], "#### Q5. The variable height is a numeric vector in the code below. Which statement returns the value 35?\n": ["- [ ] `height(length(height))`\n", "- [x] `height[length(height)]`\n", "- [ ] `height[length[height]]`\n", "- [ ] `height(5)`\n"], "#### Q6. In the image below, the data frame is named rates. The statement `sd(rates[, 2])` returns 39. As what does R regard Ellen's product ratings?\n ![Image](https://i.ibb.co/jvPPSRk/Captura-de-pantalla-2020-07-14-a-las-20-58-09.png)\n": ["- [ ] sample with replacement\n", "- [ ] population\n", "- [ ] trimmed sample\n", "- [x] sample <-- not sure\n"], "#### Q7. Which choice does R regard as an acceptable name for a variable?\n": ["- [ ] `Var_A!`\n", "- [ ] `\\_VarA`\n", "- [ ] `.2Var_A`\n", "- [x] `Var2_A`\n"], "#### Q8. What is the principal difference between an array and a matrix?\n": ["- [x] A matrix has two dimensions, while an array can have three or more dimensions.\n", "- [ ] An array is a subtype of the data frame, while a matrix is a separate type entirely.\n", "- [ ] A matrix can have columns of different lengths, but an array's columns must all be the same length.\n", "- [ ] A matrix may contain numeric values only, while an array can mix different types of values.\n"], "#### Q9. Which is not a property of lists and vectors?\n": ["- [ ] type\n", "- [ ] length\n", "- [ ] attributes\n", "- [x] scalar\n"], "#### Q10. In the image below, the data frame on lines 1 through 4 is named StDf. State and Capital are both factors. Which statement returns the results shown on lines 6 and 7?\n ![Image](https://i.ibb.co/8DL1HCV/Captura-de-pantalla-2020-07-14-a-las-18-33-34.png)\n": ["- [ ] StDf[1:2,-3]\n", "- [x] StDf[1:2,1]\n", "- [ ] StDf[1:2,]\n", "- [ ] StDf[1,2,]\n"], "#### Q11. Which function displays the first five rows of the data frame named pizza?\n": ["- [ ] BOF(pizza, 5)\n", "- [ ] first(pizza, 5)\n", "- [ ] top(pizza, 5)\n", "- [x] head(pizza, 5)\n"], "#### Q12. You accidentally display a large data frame on the R console, losing all the statements you entered during the current session. What is the best way to get the prior 25 statements back?\n": ["- [ ] console(-25)\n", "- [ ] console(reverse=TRUE)\n", "- [ ] history()\n", "- [x] history(max.show = 25)\n"], "#### Q13. d.pizza is a data frame. It's a column named temperature contains only numbers. If you extract temperature using the [] accessors, its class defaults to numeric. How can you access temperature so that it retains the class of data.frame?\n > class( d.pizza[ , 'temperature'] )\n > 'numeric'\n": ["- [ ] `class( d.pizza( , \"temperature\" ) )`\n", "- [ ] `class( d.pizza[ , \"temperature\" ] )`\n", "- [ ] `class( d.pizza$temperature )`\n", "- [x] `class( d.pizza[ , \"temperature\", drop=F ] )`\n"], "#### Q14. What does c contain?\n a <- c(3,3,6.5,8)\n b <- c(7,2,5.5,10)\n c <- a < b\n": ["- [ ] [1] NaN\n", "- [ ] [1] -4\n", "- [ ] [1] 4 -1 -1 2\n", "- [x] [1] TRUE FALSE FALSE TRUE\n"], "#### Q15. Review the statements below. Does the use of the dim function change the class of y, and if so what is y's new class?\n > y <- 1:9\n > dim(y) <- c(3,3)\n": ["- [ ] No, y's new class is \"array\".\n", "- [x] Yes, y's new class is \"matrix\".\n", "- [ ] No, y's new class is \"vector\".\n", "- [ ] Yes, y's new class is \"integer\".\n"], "#### Q16. What is `mydf$y` in this code?\n `mydf <- data.frame(x=1:3, y=c('a','b','c'), stringAsFactors=FALSE)`\n": ["- [ ] list\n", "- [ ] string\n", "- [ ] factor\n", "- [x] character vector\n"], "#### Q17. How does a vector differ from a list?\n": ["- [ ] Vectors are used only for numeric data, while lists are useful for both numeric and string data.\n", "- [ ] Vectors and lists are the same thing and can be used interchangeably.\n", "- [x] A vector contains items of a single data type, while a list can contain items of different data types.\n", "- [ ] Vectors are like arrays, while lists are like data frames.\n"], "#### Q18. What statement shows the objects on your workspace?\n": ["- [ ] list.objects()\n", "- [ ] print.objects()\n", "- [ ] getws()\n", "- [x] ls()\n"], "#### Q19. What function joins two or more column vectors to form a data frame?\n": ["- [ ] rbind()\n", "- [x] cbind()\n", "- [ ] bind()\n", "- [ ] coerce()\n"], "#### Q20. Review line 1 below. What does the statement in line 2 return?\n 1 mylist <- list(1,2,'C',4,5)\n 2 unlist(mylist)\n": ["- [ ] [1] 1 2 4 5\n", "- [ ] \"C\"\n", "- [x] [1] \"1\" \"2\" \"C\" \"4\" \"5\"\n", "- [ ] [1] 1 2 C 4 5\n"], "#### Q21. What is the value of y in this code?\n x <- NA\n y <- x/1\n": ["- [ ] Inf\n", "- [ ] Null\n", "- [ ] NaN\n", "- [x] NA\n"], "#### Q22. Two variable in the mydata data frame are named Var1 and Var2. How do you tell a bivariate function, such as cor.test, which two variables you want to analyze?\n": ["- [ ] `cor.test(Var1 ~ Var2)`\n", "- [ ] `cor.test(mydata$(Var1,Var2))`\n", "- [x] `cor.test(mydata$Var1,mydata$Var2)`\n", "- [ ] `cor.test(Var1,Var2, mydata)`\n"], "#### Q23. A data frame named d.pizza is part of the DescTools package. A statement is missing from the following R code and an error is therefore likely to occur. Which statement is missing?\n library(DescTools)\n deliver <- aggregate(count,by=list(area,driver), FUN=mean)\nprint(deliver)\n": ["- [x] `attach(d.pizza)`\n", "- [ ] `summarize(deliver)`\n", "- [ ] `mean <- rbind(d.pizza,count)`\n", "- [ ] `deliver[!complete.cases(deliver),]`\n"], "#### Q24. How to name rows and columns in DataFrames and Matrices F in R?\n": ["- [ ] data frame: names() and rownames() matrix: colnames() and row.names()\n", "- [x] data frame: names() and row.names() matrix: dimnames() (not sure)\n", "- [ ] data frame: colnames() and row.names() matrix: names() and rownames()\n", "- [ ] data frame: colnames() and rownames() matrix: names() and row.names()\n"], "#### Q25. Which set of two statements-followed by the cbind() function-results in a data frame named vbound?\n":["- [ ]\n v1<-list(1,2,3)\n v2<-list(c(4,5,6))\n vbound<-cbind(v1,v2)\n","- [ ]\n v1<-c(1,2,3)\n v2<-list(4,5,6))\n vbound<-cbind(v1,v2)\n","- [ ]\n v1<-c(1,2,3)\n v2<-c(4,5,6))\nvbound<-cbind(v1,v2)\n"],"#### Q26. ournames is a character vector. What values does the statement below return to Cpeople?\n `Cpeople <- ournames %in% grep('^C', ournames, value=TRUE)`\n": ["- [ ] records where the first character is a C\n", "- [ ] any record with a value containing a C\n", "- [ ] TRUE or FALSE, depending on whether any character in ournames is C\n", "- [x] TRUE and FALSE values, depending on whether the first character in an ournames record is C\n"], "#### Q27. What is the value of names(v[4])?\n v <- 1:3\n names(v) <- c('a', 'b', 'c')\n v[4] <- 4\n": ["- [x] \"\"\n", "- [ ] d\n", "- [ ] NULL\n", "- [ ] NA\n"], "#### Q28. Which of the following statements doesn't yield the code output below. Review the following code. What is the result of line 3?\n x <- c(1, 2, 3, 4)\n Output: [1] 2 3 4\n": ["- [ ] x[c(2, 3, 4)]\n", "- [ ] x[-1]\n", "- [ ] x[c(-1, 0, 0, 0)]\n", "- [x] x[c(-1, 2, 3, 4)]\n"], "#### Q29. Given DFMerged <- merge(DF1, DF2) and the image below, how manu rows are in DFMerged?\n ![image](https://user-images.githubusercontent.com/52632898/139964478-9806a163-76b2-4f99-97bc-c925fdf6e388.png)\n": ["- [ ] 6\n", "- [ ] 9\n", "- [ ] 3\n", "- [x] 0\n"], "#### Q30. What does R return in response to the final statement?\n x<-5:8\n names(x)<-letters[5:8]\n x\n": ["- [ ] e f g h\n", "- [ ] 5 6 7 8\n", "- [ ] e f g h\n", "- [x] e f g h\n"], "#### Q31. How do you return \"October\" from x in this code?\n x<-as.Date('2018-10-01')\n": ["- [ ] attr()\n", "- [x] months(x)\n", "- [ ] as.month(x)\n", "- [ ] month(x)\n"], "#### Q32. How will R respond to the last line of this code?\n fact<-factor(c('Rep,'Dem','Dem','Rep'))\n fact\n [1] Rep Dem Dem Rep\n Levels: Rep Dem\n fact[2]<-'Ind'\n": ["- [ ] >\n", "- [ ] [,2]Ind\n", "- [x] invalid factor level, NA generated\n", "- [ ] Ind\n"], "#### Q33. What does R return?\n StartDate<- as.Date('2020/2/28')\n StopDate<- as.Date('2020/3/1')\n StopDate-StartDate\n": ["- [ ] \"1970-01-02\"\n", "- [ ] time difference of one day\n", "- [x] time difference of two days\n", "- [ ] error in x-y: nonnumeric argument to binary operator\n"], "#### Q34. What does the expression `mtrx * mtrx` do ?\n > mtrx <- matrix( c(3,5,8,4), nrow= 2,ncol=2,byrow=TRUE)\n> newmat <- mtrx * mtrx\n": ["- [ ] it transpose **mtrx**\n", "- [ ] it premultiplies the current **netwmat** row by the **newmat** column.\n", "- [ ] it returns the results of a matrix multiplication\n", "- [x] It squares each cell in **mtrx**\n","r\n > newmat\n     [,1] [,2]\n[1,]    9   25\n [2,]   64   16\n  # The `%*%` operator gives matrix multiplication \n > mtrx %*% mtrx\n      [,1] [,2]\n [1,]   49   35\n  [2,]   56   56\n"], "#### Q35. Which function in R combines different values into a single object?\n": ["- [ ] connect()\n", "- [ ] concat()\n", "- [ ] contact()\n", "- [x] c()\n"], "#### Q36. Which file contains settings that R uses for all users of a given installation of R?\n": ["- [ ] Rdefaults.site\n", "- [ ] Renviron.site\n", "- [x] Rprofile.site\n", "- [ ] Rstatus.site\n"], "#### Q37. If **mdf** is a data frame, which statement is true ?\n": ["- [x] **ncol(mdf)** equals **length(mdf)**.\n", "- [ ] The number of rows must equals the number of columns.\n", "- [ ] The legnth of any column in **mdf** may differ from any other column in **mdf**\n", "- [ ] All columns must have the same data type.\n"], "#### Q38. A list can contain a list as an element. **MyList** has five columns, and the third column's item is a list of three items. How do you put all seven values in **MyList** into a single vector?\n": ["- [ ] vector(MyList, length = 7)\n", "- [ ] coerce(MyList, nrows = 1)\n", "- [x] unlist(MyList)\n", "- [ ] coerce(MyList, nrows = 7)\n"], "#### Q39. Which strings could be returned by the function ls(path = \"^V\")?\n": ["- [ ] ANOVAData, anovadata\n", "- [x] VisitPCA, VarX\n", "- [ ] VisitPCA, varx\n", "- [ ] Xvar, Yvar\n"], "#### Q40. StDf is a data frame. Based on this knowledge, what does this statement return?\n r\n StDf[, -1]": ["- [ ] all but the first row and first column of StDf\n", "- [ ] all but the final column of StDf\n", "- [x] all but the first column of StDf\n", "- [ ] only the first column of StDf\n"], "#### Q41. Which statement enables you to interactively open a single file?\n": ["- [ ] file.list()\n", "- [ ] file.select()\n", "- [x] file.choose()\n", "- [ ] file.open()\n"], "#### Q42. How are these data types alike: logical, integer, numeric, and character?\n": ["- [ ] Each is a type of data frame.\n", "- [x] Each is a type of atomic vector.\n", "- [ ] Each is a type of complex vector.\n", "- [ ] Each is a type of raw vector.\n"], "#### Q43. What does the `MyMat[ ,3]` subsetting operation return for this code?\n r\n MyMat = matrix(c(7, 9, 8, 6, 10, 12),nrow=2,ncol=3, byrow = TRUE)\n": ["- [ ]\n [ ,3]\n [1, ] 8\n [2, ] 12\n", "- [x]\n [1] 8 12", "- [ ]\n [1] 10 12", "- [ ]\n [ ,3]\n [1, ] 10\n [2, ] 12\n"], "#### Q44. What does the function `power.anova.test` return?\n": ["- [ ] the probability of making a Type I error\n", "- [x] the probability of not making a Type II error\n", "- [ ] the probability of making a Type II error\n", "- [ ] the probability of not making a Type I error\n"], "#### Q45. Review the statement below. What is the effect of `covariate:factor` on the analysis? \nr\n result <- lm(outcome ~ covariate + factor + covariate:factor, data = testcoef)\n": ["- [ ] It forces the intercepts of the individual regressions to zero.\n", "- [x] It calls for the effect of the covariate **within each level of the factor**.\n", "- [ ] It calls for the effect of each variable from covariate to factor in testcoef.\n", "- [ ] It forces the covariate to enter the equation before the factor levels.\n","r\n# Example call to demonstrate.  `Species` is a Factor.  Petal.Length, Petal.Width are numeric.\n # see `help(formula)` for more details on the formula specification.  `:` is 'effect modification' or 'interaction'\n > summary(lm(Petal.Length ~ Petal.Width + Species + Petal.Width:Species, data = iris))\n ... Petal.Width:Speciesversicolor   1.3228     0.5552   2.382   0.0185 *\n Petal.Width:Speciesvirginica    0.1008     0.5248   0.192   0.8480\n ...\n"], "#### Q46. A variable whose type is numeric can contain which items?\n": ["- [ ] integers and real values\n", "- [ ] integers, real, and raw values\n", "- [x] real values only\n", "- [ ] integers, real, and logical values\n"], "#### Q47. What is the legitimate name of a data class in R?\n": ["- [ ] property\n", "- [x] integer\n", "- [ ] number\n", "- [ ] variant\n"], "#### Q48. How do you extract the values above the main diagonal from a square matrix named `Rmat`?\n": ["- [x] `Rmat[upper.tri(Rmat)]`\n", "- [ ] `upper.triangular(Rmat)`\n", "- [ ] `upper.tri(Rmat)`\n", "- [ ] `upper.diag(Rmat)`\n"], "#### Q49. `x` is a vector of type integer, as shown on line 1 below. What is the type of the result returned by the statement > median(x)?\n `x <- c(12L, 6L, 10L, 8L, 15L, 14L, 19L, 18L, 23L, 59L)`\n": ["- [ ] numeric\n", "- [ ] integer\n", "- [ ] single\n", "- [x] double\n"], "#### Q50. A list named `a` is created using the statement below. Which choice returns TRUE?\n `a <- list('10', TRUE, 5.6)`\n": ["- [x] is.list(a[1])\n", "- [ ] is.numeric(a[1])\n", "- [ ] is.logical(a[1])\n", "- [ ] is.character(a[1])\n"], "#### Q51. How do you obtain the row numbers in a data frame named `pizza` for which the value of `pizza$delivery_min` is greater than or equal to 30?\n": ["- [ ]\n late_delivery <- pizza$delivery_min >= 30\n index_late <- index(late_delivery)\n index_late\n", "- [ ]\n late_delivery <- pizza$delivery_min >= 30\n rownum_late <- rownum(late_delivery)\nrownum_late\n", "- [x]\n late_delivery <- pizza$delivery_min >= 30\n which_late <- which(late_delivery)\n which_late\n", "- [x]\n late_delivery <- pizza$delivery_min >= 30\n late <- pizaa$late_delivery\n pizza$late\n"], "#### Q52. Which function returns `[1] TRUE FALSE TRUE`?\n `indat <- c('Ash Rd','Ash Cir','Ash St')`\n": ["- [ ] grepl(\"[Rd|Ave|Dr|St]\", indat)\n", "- [x] grepl(\"Rd|Ave|Dr|St\", indat)\n", "- [ ] grepl(\"Rd,Ave,Dr,St\", indat)\n", "- [ ] grepl(\"[Rd],[Ave],[Dr],[St]\", indat)\n"]}