{"#### Q1. What is the value of s?\n NSMutableString *s = [NSMutableString stringWithString: @'123'];\n[s appendString: @'456'];\n": ["- [x] 123456\n", "- [ ] 123\n", "- [ ] 456\n", "- [ ] This code contains an error.\n"], 
    
    "#### Q2. What's the value of i after these statements?\n NSString *str = nil;\n    NSInteger i = str.integerValue;\n": [
    
    "- [ ] nil\n", "- [x] 0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)\n", "- [ ] -1\n", "- [ ] This code crashes.\n"], 
    "#### Q3. What value is in str after this line in executed?\n `NSString str = 'test' + '' + 'more';`\n": ["- [x] This code contains an error\n", "- [ ] test\n", "- [ ] nil\n", "- [ ] test more\n"], 
"#### Q4. What does this code print?\n NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary<NSString *,id> * _Nullable bindings) {\n    return evaluatedObject.intValue % 2 == 0;\n  }];\n  NSArray *vals = @[@1, @2, @3];\n NSArray *n2 = [vals filteredArrayUsingPredicate:p2];\n  NSLog(@'%@', n2.firstObject);\n": ["- [x] 2\n", "- [ ] 1,2,3\n", "- [ ] 1,2\n", "- [ ] Nothing, since this code contains an error.\n"], "#### Q5. Property defaults include \\_?\n": ["- [x] atomic/strong\n", "- [ ] atomic/weak\n", "- [ ] nonatomic/weak\n", "- [ ] nonatomic/strong\n"], "#### Q6. What is the key difference between NSDictionary and NSMutableDictionary?\n": ["- [x] NSMutableDictionary's values can change\n", "- [ ] NSMutableDictionary has not initializers.\n", "- [ ] NSDictionary can't be copied.\n", "- [ ] NSDictionary's values can change.\n"], 

"#### Q7. What is foo?\n `-(float)foo;`\n": ["- [x] A function with a return type of float.\n", "- [ ] This code contains an error.\n", "- [ ] A variable declaration of type float.\n", "- [ ] A property of type float.\n"], "#### Q8. What can you glean from this line?\n `#import 'NSString+NameHelper.h'`\n": ["- [x] NameHelper is a category of NSString.\n", "- [ ] NameHelper is a subclass of NSString.\n", "- [ ] NSString implements the NameHelper protocol.\n", "- [ ] NSString has a helper class.\n"], "#### Q9. What's wrong with this code?\n `float x = 5.;`\n": ["- [x] Nothing is wrong with this code.\n", "- [ ] Declarations do not need semicolons.\n", "- [ ] x=5 is an invalid float.\n", "- [ ] Variables can't be declared and initialized in the same state.\n"], 
"#### Q10. How many times with this loop be executed?\n for (int x=0; x<100; x++) {\n    x = x + 1;\n  }\n": ["- [x] 50\n", "- [ ] 99\n", "- [ ] 100\n", "- [ ] This code contains an error.\n"], "#### Q11. What is this code an example of?\n `[self addObserver: self forKeyPath: @'val' options:0 context: nil];`\n": ["- [x] Key-Value Observing\n", "- [ ] Class Value Observing\n", "- [ ] Key-Data Observing\n", "- [ ] KeyPath Observing\n"], "#### Q12. What does ARC stand for?\n": ["- [x] Automatic Reference Counting\n", "- [ ] Automatic Retain Checking\n", "- [ ] Async Retain Cycles\n", "- [ ] Automatic Release Code\n"], 
"#### Q13. What is printed for this code?\n int val = 0;\n val = 1.5 \nprintf('%d', val);\n": ["- [x] 1\n", "- [ ] 2\n", "- [ ] 0\n", "- [ ] This code contains an error.\n"], "#### Q14. What best describes class inheritance in Objective-C?\n": ["- [x] single inheritance but multiple protocol implementation\n", "- [ ] Objective-C doesn't support inheritance\n", "- [ ] dual class inheritance\n", "- [ ] unlimited class inheritance and protocol adherence\n"], "#### Q15. How many keys does this NSDictionary have after this code is executed?\n `NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys: @'b', @'e', @'a', @'r', nil];`\n": ["- [x] 2\n", "- [ ] 4\n", "- [ ] 5\n", "- [ ] This code contains an error.\n"], "#### Q16. What is wrong with this code?\n NSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];\n[dict1 setValue:@'key' forKey:@'value'];\n": ["- [ ] The key and value items are mixed\n", "- [x] Nothing is wrong with it\n", "- [ ] You can't set the capacity of a dictionary\n", "- [ ] NSMutableDictionary doesn't have a :setValue:forKey function.\n"], 
"#### Q17. What is printed from this code?\n NSData *data = [@'print' dataUsingEncoding:NSASCIIStringEncoding];\n NSLog(@'%@', [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);\n": ["- [x] print\n", "- [ ] This code is invalid\n", "- [ ] Nothing is printed from this code.\n", "- [ ] nil\n"], "#### Q18. What is different about this function?\n `+(void)doSomething;`\n": ["- [x] It is static\n", "- [ ] It is abstract.\n", "- [ ] It is inline.\n", "- [ ] This code contains an error.\n"], "#### Q19. Structs can have \\_?\n": ["- [ ] functions\n", "- [ ] initializers\n", "- [x] fields\n", "- [ ] all of these answers\n"], 

"#### Q20. What is wrong with this code?\n @interface MyClass : NSObject\n @property (strong, nonatomic, readonly) NSString *name;\n@end\n": ["- [x] There is nothing wrong with this code.\n", "- [ ] There is not read-only directive.\n", "- [ ] MyClass doesn't implement NSObject.\n", "- [ ] Properties are declared in the implementation.\n"], "#### Q21. What is an enums base type for the code below?\n `typedef enum { Foo1, Foo2} Foo;`\n": ["- [x] There is no base type.\n", "- [ ] NSObject\n", "- [ ] int\n", "- [ ] NSNumber\n"], "#### Q22. If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?\n": ["- [x] UserDefaults\n", "- [ ] plist file\n", "- [ ] CoreData\n", "- [ ] TextFile\n"], "#### Q23. What are categories used for?\n": ["- [x] to extend other classes\n", "- [ ] to manage access control\n", "- [ ] to coordinate objects\n", "- [ ] to group classes\n"], 
"#### Q24. What is this Objective-C code checking?\n if ([keyPath isInstanceOf:[NSString class]]) {\n    }\n": ["- [x] This code contains an error\n", "- [ ] if keyPath is an instance of NSString\n", "- [ ] if keyPath's baseclass is the same as NSString's baseclass\n", "- [ ] if keyPath implements the same methods as NSString\n"], "#### Q25. What is this a declaration of?\n `int(^foo)(int);`\n": ["- [ ] an Extension\n", "- [ ] a Generic\n", "- [x] a block of code\n", "- [ ] an abstract class\n"],
 "#### Q26. For observing changes to a property, which of these two statements cause the related method to be called and why?\n 1. _val = 1;\n    2. self.val= 100;\n": ["- [x] Statement 2, since it calls the auto-created setter on the property.\n", "- [ ] Statement 1, since it uses the property directly.\n", "- [ ] Statement 2, since it specifies the class instance to use.\n", "- [ ] Statement 1, since it calls the auto-created setter on the property.\n"],
  "#### Q27. What is wrong with this code?\nfloat x = 2.0;\n  int(^foo)(int) = ^(int n1) {\n    return (int)(n1*x);\n };\n  foo(5);\n": ["- [ ] Ints and floats can't be multiplied.\n", "- [ ] The parameter isn't declared correctly.\n", "- [ ] x is not in the right scope.\n", "- [x] Nothing is wrong with this code.\n"], "#### Q28. What's the difference between an array and a set?\n": ["- [x] Arrays are ordered, non-unique values.\n", "- [ ] Arrays are stored sorted.\n", "- [ ] Sets are ordered, unique values.\n", "- [ ] Sets can contain nils.\n"], "#### Q29. Dot notation can be used for \\_?\n": ["- [ ] nothing, as they're never used in Objective-C\n", "- [ ] function calls only\n", "- [x] property getter/setter\n", "- [ ] parameter delimiters\n"], 
  "#### Q30. What is the value of newVals after this code is executed?\n NSArray *vals = @[@'1', @'2', @'3'];\n  NSPredicate *pred = [NSPredicate predicateWithFormat:@'SELF.intValue > 1'];\nNSArray *newVals = [vals filteredArrayUsingPredicate:pred];\n": ["- [x] 2,3\n", "- [ ] nil\n", "- [ ] This code contains an error\n", "- [ ] 2,\"3\"\n"], "#### Q31. How would this function be called?\n`-(int)foo:(int)a b:(int)c;`\n": ["- [ ] self.foo(5, b:10);\n", "- [ ] This code contains an error.\n", "- [ ] [self foo:5:10:20];\n", "- [x] [self foo:5 b:10];\n"], "#### Q32. What is the type of the error return value stored in json?\n NSError *error;\n NSData *data;\n d  json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&error];\n": ["- [ ] NSString\n", "- [ ] NSArray\n", "- [ ] id\n", "- [ ] NSDictionary\n"], "#### Q33. What is significant about this function declaration?\n -(void)testFunc:(NSString**)str;\n": ["- [ ] The parameter is passed by value and can not be changed\n", "- [ ] \\*\\* is not allowed on a parameter\n", "- [ ] The parameter may be nil\n", "- [x] The parameter is passed by reference and may be changed\n"],
   "#### Q34. What is printed from this code execution?\n  typedef enum {\n     thing1,\n     thing2,\n    thing3\n } Thing;\n -(void) enumStuff {\n    NSLog(@'%d', thing2);}\n": ["- [ ] 0\n", "- [x] 1\n", "- [ ] thing2\n", "- [ ] This code does not print anything\n"], "#### Q35. You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?\n": ["- [ ] non-atomic\n", "- [ ] strong\n", "- [ ] weak\n", "- [x] atomic\n"], "#### Q36. What is wrong with this line of code?\n int temp = 1==1;\n": ["- [ ] `temp` is a keyword.\n", "- [ ] 1==1 is invalid.\n", "- [ ] 1==1 evaluates to a Boolean.\n", "- [x] Nothing is wrong with it.\n"], 
"#### Q37. What is special about the code within this block?\n dispatch_async(dispatch_get_main_queue(), ^{\n  // code\n    });\n": ["- [x] It executes on the main queue.\n", "- [ ] It is the last code to run before the app goes inactive.\n", "- [ ] It executes on a background thread.\n", "- [ ] It is queued to execute in the background.\n"], 
"#### Q38. How many items are in set1 after this code executes?\n NSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];\n[set1 add0bject:@3];\n": ["- [ ] zero\n", "- [ ] six\n", "- [ ] one\n", "- [x] five\n"], 

"#### Q39. What is wrong with this code?\nNSDictionary *d1 = @[@'v1', @4, @'v2', @5.6, @'v3'];\n NSlog(@'d1: %@', d1);\n": ["- [ ] NSDictionary cannot be printed this way.\n", "- [x] The last key is missing a value.\n", "- [ ] Dictionaries cannot have mixed types as values.\n", "- [ ] d1 is assigned an NSArray of values.\n"], "#### Q40. What is the initial value of the property `val`?\n @property (nonatomic, readonly) int val;\n": ["- [ ] 8\n", "- [ ] nil\n", "- [ ] -1\n", "- [ ] undefined\n"]}
